/*
 * bank-mizrahi-calculator
 *
 * The API for Bank Mizrahi
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using System.Data;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Http.HttpResults;
using System.Linq;

namespace IO.Swagger.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class CalculatorApiController : ControllerBase
    {
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Calculation of the values according to the required arithmetic operation</remarks>
        /// <param name="param1"></param>
        /// <param name="param2"></param>
        /// <param name="arithmeticOperation"></param>
        /// <response code="200">ok</response>
        /// <response code="401"></response>
        [HttpPost]
        [Route("/RIKI09325_1/Mizrachi/1.0.0/calculator/{param1}/{param2}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("CalculatorParam1Param2Post")]
        [SwaggerResponse(statusCode: 200, type: typeof(ModelApiResponse), description: "ok")]
        public virtual IActionResult CalculatorParam1Param2Post([FromRoute][Required] int? param1, [FromRoute][Required] int? param2, [FromHeader][Required()] string arithmeticOperation)
        {
            try
            {
                //check edge cases
                if (param2 == 0 && arithmeticOperation == "/")
                {
                    return StatusCode(422, "can't divide By Zero");
                }

                if (!new string[]{"-","+","*", "/" }.Contains(arithmeticOperation))
                {
                    return StatusCode(422, "invalid arithmetic operation");
                }

                decimal result = (decimal)new DataTable().Compute($"{param1:F2}{arithmeticOperation}{param2:F2}", null);
                return StatusCode(200, result);
            }
            catch (Exception ex)
            {
                return StatusCode(400, ex.Message);
            }
        }
    }
}
